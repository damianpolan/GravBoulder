package com.example.gravboulder;

import java.util.ArrayList;
import java.util.HashMap;

import org.andengine.engine.camera.BoundCamera;
import org.andengine.engine.camera.ZoomCamera;
import org.andengine.engine.handler.IUpdateHandler;
import org.andengine.entity.scene.IOnSceneTouchListener;
import org.andengine.entity.scene.Scene;
import org.andengine.entity.scene.background.Background;
import org.andengine.entity.sprite.vbo.ISpriteVertexBufferObject;
import org.andengine.input.touch.TouchEvent;
import org.andengine.opengl.texture.TextureOptions;
import org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas;
import org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory;
import org.andengine.opengl.texture.region.ITextureRegion;
import org.andengine.ui.activity.BaseGameActivity;

import android.graphics.Point;
import android.location.Address;
import android.util.DisplayMetrics;
import android.util.Log;

public class GameScene extends Scene
{
	private static final int CAMERA_WIDTH = 800;
	private static final int CAMERA_HEIGHT = 480;
	public static int BLOCK_SIZE = 256;
	public static int BORDER_WIDTH_X = 50;
	GameInfo info;
	BaseGameActivity gameActivity;

	TextureHolder textureHolder;
	//change to hashmap?
	//ArrayList<GridEntity> entities;
	HashMap<String, GridEntity> entities;

	public GameScene(GameInfo info, BaseGameActivity gameActivity)
	{
		super();
		//initialize background
		setBackground(new Background(0.09804f, 0.6274f, 0.8784f));

		//texture
		textureHolder = new TextureHolder(gameActivity);
		textureHolder.loadTextures(info.mapArtType);

		this.gameActivity = gameActivity;
		entities = new HashMap<String, GridEntity>();
		this.info = info;

		setupCamera();
		generateGridEntities();
 
		//register handlers
		registerUpdateHandler(new UpdateHandler());
		setOnSceneTouchListener(new TouchListener());
	}

	protected void setupCamera()
	{
		//camera
		DisplayMetrics metrics = gameActivity.getResources().getDisplayMetrics();
		ZoomCamera camera = ((ZoomCamera) gameActivity.getEngine().getEngineOptions().getCamera());

		camera.setZoomFactor(1f);
		camera.setXMax(info.baseGrid.length * BLOCK_SIZE + BORDER_WIDTH_X);
		camera.setXMin(-BORDER_WIDTH_X);
		camera.setYMax(info.baseGrid[0].length * BLOCK_SIZE * metrics.heightPixels / (float) metrics.widthPixels);
		camera.setYMin(0);
		camera.setCenter(info.baseGrid.length * BLOCK_SIZE / 2f, info.baseGrid[0].length * BLOCK_SIZE / 2f);

	}

	protected void generateGridEntities()
	{
		entities.clear();
		for (int y = 0; y < info.baseGrid.length; y++)
		{
			for (int x = 0; x < info.baseGrid[0].length; x++)
			{
				GridEntity newE = createGridEntity(x, y);
				if (newE != null)
					entities.put(x + "" + y, newE);
			}
		}
	}

	protected GridEntity createGridEntity(int gridX, int gridY)
	{
		GridEntity newE = null;

		if (info.baseGrid[gridX][gridY] == 'b')//wall block
		{
			newE = new GridEntity(info.baseGrid[gridX][gridY], gridX, gridY, textureHolder.wallTextureRegion,
					gameActivity.getVertexBufferObjectManager());
			newE.updateLocation(BLOCK_SIZE);
			super.attachChild(newE);
		}
		else if (info.baseGrid[gridX][gridY] == '1')//boulder block
		{
			newE = new GridEntity(info.baseGrid[gridX][gridY], gridX, gridY, textureHolder.boulderTextureRegion,
					gameActivity.getVertexBufferObjectManager());
			newE.updateLocation(BLOCK_SIZE);
			super.attachChild(newE);
		}
		else if (info.baseGrid[gridX][gridY] == '2')//boulder block
		{
			newE = new GridEntity(info.baseGrid[gridX][gridY], gridX, gridY, textureHolder.boulderTextureRegion,
					gameActivity.getVertexBufferObjectManager());
			newE.updateLocation(BLOCK_SIZE);
			newE.setRotation(270);
			super.attachChild(newE);
		}
		else if (info.baseGrid[gridX][gridY] == '3')//boulder block
		{
			newE = new GridEntity(info.baseGrid[gridX][gridY], gridX, gridY, textureHolder.boulderTextureRegion,
					gameActivity.getVertexBufferObjectManager());
			newE.updateLocation(BLOCK_SIZE);
			newE.setRotation(90);
			super.attachChild(newE);
		}
		else if (info.baseGrid[gridX][gridY] == '4')//boulder block
		{
			newE = new GridEntity(info.baseGrid[gridX][gridY], gridX, gridY, textureHolder.boulderTextureRegion,
					gameActivity.getVertexBufferObjectManager());
			newE.updateLocation(BLOCK_SIZE);
			newE.setRotation(180);
			super.attachChild(newE);
		}

		return newE;
	}

	protected void move(int startX, int startY, int toX, int toY)
	{
		if (info.baseGrid[toX][toY] == '0')
		{
			info.baseGrid[toX][toY] = info.baseGrid[startX][startY];
			info.baseGrid[startX][startY] = '0';

			GridEntity ge = entities.get(startX + "" + startY);
			//ge.gridX = toX;
			//ge.gridY = toY;
			ge.animateToLocation(BLOCK_SIZE, toX, toY);
			entities.remove(startX + "" + startY);
			entities.put(toX + "" + toY, ge);
		}
	}

	/**
	 * NESW
	 * @param direction
	 */
	protected void shift(char direction)
	{
		if (direction == 'N')
		{
			for (int x = 0; x < info.baseGrid.length; x++)
			{
				for (int y = 0; y < info.baseGrid[0].length; y++)
				{
					GridEntity ge = entities.get(x + "" + y);
					if (ge != null)
					{
						char t = ge.type;
						if (t == '1' || t == '2' || t == '3' || t == '4')
						{
							move(x, y, x, y - 1);
						}
					}
				}
			}
		}
		else if (direction == 'E')
		{
			for (int x = info.baseGrid.length - 1; x >= 0; x--)
			{
				for (int y = 0; y < info.baseGrid[0].length; y++)
				{
					GridEntity ge = entities.get(x + "" + y);
					if (ge != null)
					{
						char t = ge.type;
						if (t == '1' || t == '2' || t == '3' || t == '4')
						{
							move(x, y, x + 1, y);
						}
					}
				}
			}
		}
		else if (direction == 'S')
		{
			for (int x = 0; x < info.baseGrid.length; x++)
			{
				for (int y = info.baseGrid[0].length - 1; y >= 0; y--)
				{
					GridEntity ge = entities.get(x + "" + y);
					if (ge != null)
					{
						char t = ge.type;
						if (t == '1' || t == '2' || t == '3' || t == '4')
						{
							move(x, y, x, y + 1);
						}
					}
				}
			}
		}
		else if (direction == 'W')
		{
			for (int x = 0; x < info.baseGrid.length; x++)
			{
				for (int y = info.baseGrid[0].length - 1; y >= 0; y--)
				{
					GridEntity ge = entities.get(x + "" + y);
					if (ge != null)
					{
						char t = ge.type;
						if (t == '1' || t == '2' || t == '3' || t == '4')
						{
							move(x, y, x - 1, y);
						}
					}
				}
			}
		}
	}

	private class TouchListener implements IOnSceneTouchListener
	{
		float startX = 0;
		float startY = 0;
		boolean swiperegistered = false;

		@Override
		public boolean onSceneTouchEvent(Scene pScene, TouchEvent pSceneTouchEvent)
		{
			if (pSceneTouchEvent.getAction() == TouchEvent.ACTION_DOWN)
			{
				startX = pSceneTouchEvent.getX();
				startY = pSceneTouchEvent.getY();
				swiperegistered = false;
			}
			else if (pSceneTouchEvent.getAction() == TouchEvent.ACTION_UP)
			{
				if (swiperegistered == false)
				{
					double angleDegrees = Math.toDegrees(Math.atan2(pSceneTouchEvent.getY() - startY, pSceneTouchEvent.getX() - startX));
					double length = Math.hypot(pSceneTouchEvent.getY() - startY, pSceneTouchEvent.getX() - startX);

					if (length > 50)
					{
						if (angleDegrees >= -135 && angleDegrees < -45)
						{
							shift('N');
						}
						else if (angleDegrees >= 45 && angleDegrees < 135)
						{
							shift('S');
						}
						else if (angleDegrees >= 135 || angleDegrees < -135)
						{
							shift('W');
						}
						else if (angleDegrees < 45 || angleDegrees >= -45)
						{
							shift('E');
						}
						swiperegistered = true;
					}
				}
			}

			return false;
		}
	}

	private class UpdateHandler implements IUpdateHandler
	{
		public UpdateHandler()
		{
		}

		@Override
		public void onUpdate(float pSecondsElapsed)
		{

		}

		@Override
		public void reset()
		{

		}
	}

}
